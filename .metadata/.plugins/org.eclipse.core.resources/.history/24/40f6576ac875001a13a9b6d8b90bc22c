import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.Serializable;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

public class ClientClass extends UnicastRemoteObject implements Serializable, ClientInterface {
	
	Graph g = new Graph();
    static Semaphore rm = new Semaphore(1);
    static Semaphore wm = new Semaphore(1);
    volatile static int rc = 0;
    
	protected ClientClass() throws RemoteException {

	}

	@Override
	public String executeQuery(String query) {
		Thread q = new QueryExecutor("query");
		q.start();
		try {
			q.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return ((QueryExecutor)q).val;
	}

	class QueryExecutor extends Thread {
		public String val = "old value";
		
		String query;
		
		public QueryExecutor(String query) {
			this.query=query;
		}
		
		
		@Override 
		public void run() {
			long threadId = Thread.currentThread().getId();
			try {
				char[] parts = query.toCharArray();
				System.out.println(query);
                char operation = parts[0];
                int s = Integer.parseInt(Character.toString(parts[2]));
                int e = Integer.parseInt(Character.toString(parts[4]));
				switch (operation) {
                case 'A':
                    wm.acquire();
                    g.addEdge(s, e);
                    TimeUnit.SECONDS.sleep(10);
                    wm.release();
                    break;
                case 'Q':
                    rm.acquire();
                    rc++;
                    if(rc == 1) {
                        wm.acquire();
                    }
                    rm.release();
                    File file = new File("output" + String.valueOf(threadId)+".txt");
                    FileWriter fr = new FileWriter(file, false);
                    BufferedWriter br = new BufferedWriter(fr);
                    PrintWriter pr = new PrintWriter(br);
                    val = g.getShortestPath(s, e) + "";
                    pr.println(val);
                    pr.close();
                    br.close();
                    fr.close();
                    rm.acquire();
                    rc--;
                    if(rc == 0)
                        wm.release();
                    rm.release();
                    break;
                case 'D':
                    wm.acquire();
                    g.removeEdge(s, e);
                    wm.release();
                    break;
                default:
                    System.out.println("Error in batch file");

            }
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
}
